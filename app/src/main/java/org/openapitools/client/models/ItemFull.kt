/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * same as ItemInOrder, but lang related fields contain more infos, + rarity, set_root, MR, trading tax.
 *
 * @param id 
 * @param urlName [a-z] snake case name of the item
 * @param icon it's a part of url, if you want to get an image you need to prepend assets root dirrectory: `http://warframe.market/static/assets/` 
 * @param iconFormat 
 * @param thumb Thumb of an icon
 * @param subIcon Usually, if item is part of set and not set itself, it will have `sub_icon`  like: **Mirage Blueprint** is part of **Mirage Set**, therefore the `icon` will be the **Mirage warframe** icon, and the `sub_icon` will be the **blueprint** icon 
 * @param modMaxRank in the next api version will be renamed to `max_rank`
 * @param subtypes relics and fishes are having this field
 * @param tags 
 * @param ducats 
 * @param quantityForSet 
 * @param setRoot This item represents set itself
 * @param masteryLevel Mastery requirenment fro this item
 * @param rarity Item rarity
 * @param tradingTax 
 * @param en 
 * @param ru 
 * @param ko 
 * @param fr 
 * @param de 
 * @param sv 
 * @param zhHant 
 * @param zhHans 
 * @param pt 
 * @param es 
 * @param pl 
 */


data class ItemFull (

    @Json(name = "id")
    val id: kotlin.String? = null,

    /* [a-z] snake case name of the item */
    @Json(name = "url_name")
    val urlName: kotlin.String? = null,

    /* it's a part of url, if you want to get an image you need to prepend assets root dirrectory: `http://warframe.market/static/assets/`  */
    @Json(name = "icon")
    val icon: kotlin.String? = null,

    @Json(name = "icon_format")
    val iconFormat: ItemFull.IconFormat? = null,

    /* Thumb of an icon */
    @Json(name = "thumb")
    val thumb: kotlin.String? = null,

    /* Usually, if item is part of set and not set itself, it will have `sub_icon`  like: **Mirage Blueprint** is part of **Mirage Set**, therefore the `icon` will be the **Mirage warframe** icon, and the `sub_icon` will be the **blueprint** icon  */
    @Json(name = "sub_icon")
    val subIcon: kotlin.String? = null,

    /* in the next api version will be renamed to `max_rank` */
    @Json(name = "mod_max_rank")
    val modMaxRank: kotlin.Int? = null,

    /* relics and fishes are having this field */
    @Json(name = "subtypes")
    val subtypes: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "ducats")
    val ducats: kotlin.Int? = null,

    @Json(name = "quantity_for_set")
    val quantityForSet: kotlin.Int? = null,

    /* This item represents set itself */
    @Json(name = "set_root")
    val setRoot: kotlin.Boolean? = null,

    /* Mastery requirenment fro this item */
    @Json(name = "mastery_level")
    val masteryLevel: kotlin.Int? = null,

    /* Item rarity */
    @Json(name = "rarity")
    val rarity: ItemFull.Rarity? = null,

    @Json(name = "trading_tax")
    val tradingTax: kotlin.Int? = null,

    @Json(name = "en")
    val en: kotlin.Any? = null,

    @Json(name = "ru")
    val ru: kotlin.Any? = null,

    @Json(name = "ko")
    val ko: kotlin.Any? = null,

    @Json(name = "fr")
    val fr: kotlin.Any? = null,

    @Json(name = "de")
    val de: kotlin.Any? = null,

    @Json(name = "sv")
    val sv: kotlin.Any? = null,

    @Json(name = "zh_hant")
    val zhHant: kotlin.Any? = null,

    @Json(name = "zh_hans")
    val zhHans: kotlin.Any? = null,

    @Json(name = "pt")
    val pt: kotlin.Any? = null,

    @Json(name = "es")
    val es: kotlin.Any? = null,

    @Json(name = "pl")
    val pl: kotlin.Any? = null

) {

    /**
     * 
     *
     * Values: land,port
     */
    @JsonClass(generateAdapter = false)
    enum class IconFormat(val value: kotlin.String) {
        @Json(name = "land") land("land"),
        @Json(name = "port") port("port");
    }
    /**
     * Item rarity
     *
     * Values: common,uncommon,rare,legendary,peculiar
     */
    @JsonClass(generateAdapter = false)
    enum class Rarity(val value: kotlin.String) {
        @Json(name = "common") common("common"),
        @Json(name = "uncommon") uncommon("uncommon"),
        @Json(name = "rare") rare("rare"),
        @Json(name = "legendary") legendary("legendary"),
        @Json(name = "peculiar") peculiar("peculiar");
    }
}

